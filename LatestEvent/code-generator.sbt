val generateUIEventDefinitions =
  taskKey[File]("Generate UIEventDefinitions.scala file from UI Events (W3C Working Draft)")
generateUIEventDefinitions := {
  import com.gargoylesoftware.htmlunit.WebClient
  import com.gargoylesoftware.htmlunit.html.{HtmlPage, HtmlTable}
  import org.portablescala.sbtplatformdeps.PlatformDepsPlugin
  import org.portablescala.sbtplatformdeps.PlatformDepsPlugin.autoImport._

  import scala.collection.JavaConverters._
  import scala.meta._
  val generatedAst = {
    val webClient = new WebClient()
    try {
      webClient.getOptions.setJavaScriptEnabled(false)
      webClient.getOptions.setCssEnabled(false)
      val document = webClient.getPage[HtmlPage](
        "https://www.w3.org/TR/uievents/"
      )
      try {

        q"""
          package com.thoughtworks.binding {
            import ScalaJsDomMissingTypes._

            private[binding] trait UIEventDefinitions {
              import org.scalajs.dom._
              import org.scalajs.dom.raw._
              ..${
                   (for {
                     eventDefinition <- document.querySelectorAll("table.event-definition").asScala.view
                     definitionRows = (for {
                       row <- eventDefinition.asInstanceOf[HtmlTable].getRows().asScala.view
                     } yield {
                       val Seq(th, td) = row.getCells().asScala
                       th.asNormalizedText() -> td
                     }).toMap
                     eventType = definitionRows("Type").asNormalizedText()
                     lastEventType = (for {
                       interfaceCode <- definitionRows("Interface")
                         .querySelectorAll("""code[class="idl"]""")
                         .asScala
                       text = interfaceCode.asNormalizedText()
                       if text.endsWith("Event")
                     } yield Type.Name(text)).last
                     targetName <- definitionRows("Trusted Targets")
                       .querySelectorAll("code")
                       .asScala
                       .map(_.asNormalizedText())
                       .distinct
                     if targetName.headOption.exists(_.isUpper)
                   } yield {
                     q"""
                      def ${Term.Name(eventType)}(
                        eventTarget: ${Type.Name(targetName)}
                      ) =
                        new LatestEvent[$lastEventType](
                          eventTarget,
                          ${Lit.String(eventType)}
                        )
                    """
                   }).toList
                 }
            }
          }
        """
      } finally {
        document.cleanUp()
      }
    } finally {
      webClient.close()
    }
  }
  val file =
    (Compile / scalaSource).value / "com" / "thoughtworks" / "binding" / "UIEventDefinitions.scala"
  val fileContent = Seq(
    "// Don't edit this file, because it is generated by `sbt generateUIEventDefinitions`",
    generatedAst.syntax
  )
  IO.writeLines(file, fileContent)
  file
}
